version: '2.0'
config:
  store_entities_as_slots: true

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true

intents:
# Conceptos
  - pregunta_concepto_patron:
      use_entities: true
  - pregunta_concepto_scrum:
      use_entities: true
  - pregunta_concepto_agil:
      use_entities: true
  - pregunta_concepto_fdd:
      use_entities: true
  - pregunta_concepto_atr-calidad:
      use_entities: true
  - pregunta_concepto_hook:
      use_entities: true
  - pregunta_concepto_req_func:
      use_entities: true
  - pregunta_concepto_req_no_func:
      use_entities: true
  - pregunta_concepto_req_no_func_ejemplo:
      use_entities: true
  - pregunta_concepto_req_func_ejemplo:
      use_entities: true
  - pregunta_diferencia_req_func_no_func:
      use_entities: true
  - pregunta_concepto_patron_listado:
      use_entities: true

  # Patrones especificos
  - pregunta_patron_abstract-factory:
      use_entities: true
  - pregunta_patron_factory-method:
      use_entities: true
  - pregunta_patron_builder:
      use_entities: true
  - pregunta_patron_prototype:
      use_entities: true
  - pregunta_patron_singleton:
      use_entities: true
  - pregunta_patron_adapter:
      use_entities: true
  - pregunta_patron_bridge:
      use_entities: true
  - pregunta_patron_composite:
      use_entities: true
  - pregunta_patron_decorator:
      use_entities: true
  - pregunta_patron_facade:
      use_entities: true
  - pregunta_patron_flyweigth:
      use_entities: true
  - pregunta_patron_proxy:
      use_entities: true
  - pregunta_patron_chain-of-responsibility:
      use_entities: true
  - pregunta_patron_command:
      use_entities: true
  - pregunta_patron_memento:
      use_entities: true
  - pregunta_patron_iterator:
      use_entities: true
  - pregunta_patron_mediator:
      use_entities: true
  - pregunta_patron_observer:
      use_entities: true
  - pregunta_patron_state:
      use_entities: true
  - pregunta_patron_strategy:
      use_entities: true
  - pregunta_patron_template-method:
      use_entities: true
  - pregunta_patron_visitor:
      use_entities: true
  

# Flujo
  - saludo
  - afirmacion
  - negacion
  - despedida
  - gracias
  - entendio
  - no_entendio
  - bien
  - mal
  - aburrido
  - cansado
# Clases marcelo
  - ayuda_transparencia
  - ayuda_presentacion_transparencia
  - concepto_transparencia
  - clase_marcelo
  - concepto_millenial
  - concepto_centennial
  - objetivo_clase_marcelo
# Autoconocimiento
  - wizard_knowledge_ambiguous
  - wizard_knowledge_specific
  - wizard_help_request
  - wizard_name
  - wizard_knowledge_not_specific
  - wizard_challenge_intelligence
  - wizard_challenge_name
  - wizard_creation
  - wizard_birth
  - wizard_year_specific
  - wizard_year_non_specific_older
  - wizard_year_non_specific_younger
  - wizard_genre
  - wizard_parents

entities:
- concepto
- patron
- atr-calidad

slots: {}

responses:
# Flujo
  utter_saludo:
  - text: 'Hola! Soy DesignWizard. Qué te pinta hacer hoy?'
  utter_mood_bien:
  - text: 'Me alegro boludo'
  utter_ask_more_depth:
  - text: 'Che que parte te complico más?'
  utter_de_nada:
  - text: 'No hay porque salamin'
  
# Conceptos  
  utter_concepto_patron:
  - text: 'Los patrones de diseño (design patterns) son soluciones habituales a problemas comunes en el diseño de software. Cada patrón es como un plano que se puede personalizar para resolver un problema de diseño particular de tu código.'
  utter_concepto_scrum:
  - text: 'La metodología Scrum es un framework que se utiliza dentro de equipos que manejan proyectos complejos. Es decir, se trata de una metodología de trabajo ágil que tiene como finalidad la entrega de valor en períodos cortos de tiempo y para ello se basa en tres pilares: la transparencia, inspección y adaptación.'
  utter_concepto_agil:
  - text: 'Las metodologías ágiles son un conjunto de métodos que permiten adaptar el modo de trabajo a las condiciones del proyecto, aportando flexibilidad, eficiencia y, por lo tanto, logrando un mejor producto a menor coste.'
  utter_concepto_FDD:
  - text: 'Feature-driven development (FDD) es un proceso para desarrollo de software de forma iterativa e incremental\nEl proceso comienza por los requerimientos y el modelado, siguiendo por el diseño y construcción en base a incrementos'
  utter_concepto_atributo-de-calidad:
  - text: 'Los atributos de calidad (también cualidades del software) son características no funcionales que se consideran deseables en un sistema de software.'
  - text: 'Un atributo de calidad es una propiedad medible de un sistema, que indica qué tan bien el sistema satisface las necesidades de las partes interesadas.'
  utter_concepto_hook:
  - text: 'Hooking is a concept that allows modifying the behavior of a program. It’s the chance that code gives you to change the original behavior of something without changing your code of the corresponding class. This is done by overwriting the hook methods.'
  utter_concepto_requerimiento-funcional:
  - text: 'Los requerimientos funcionales de un sistema son aquellos que describen cualquier actividad/servicio que éste deba realizar.'
  utter_concepto_requerimiento-funcional_ejemplo:
  - text: 'Un ejemplo de requerimiento funcional, sería:\nEl sistema permitirá a los usuarios autorizados ingresar planes y cronogramas de proyecto'
  - text: 'Por ejemplo,\nEl sistema permitirá el envío automatizado de cartas de entrega de órdenes directamente al almacén.'
  utter_concepto_requerimiento-no-funcional:
  - text: 'Los requerimientos no funcionales representan características generales y restricciones de la aplicación o sistema que se esté desarrollando.'
  - text: 'Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema: rendimiento, seguridad, disponibilidad.'
  utter_concepto_requerimiento-no-funcional_ejemplo:
  - text: 'Por ejemplo,\nTodas las comunicaciones externas entre los servidores de datos, la aplicación y el cliente del sistema deben estar cifradas utilizando el algoritmo RSA.\nEs un ejemplo de RNF que puede encasillarse en el atributo de calidad de Seguridad.'
  utter_diferencia_req_func_no_func:
  - text: ''
  utter_concepto_patron_tipos:
  - text: ''
  utter_concepto_patron_listado:
  - text: ''

# Patrones especificos
  utter_patron_abstract-factory:
  - text: 'Abstract Factory es un patrón de diseño creacional que nos permite producir familias de objetos relacionados sin especificar sus clases concretas.'
  utter_patron_factory-method:
  - text: 'Factory Method es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de objetos que se crearán.'
  utter_patron_builder:
  - text: 'Builder es un patrón de diseño creacional que nos permite construir objetos complejos paso a paso. El patrón nos permite producir distintos tipos y representaciones de un objeto empleando el mismo código de construcción.'
  utter_patron_prototype:
  - text: 'Prototype es un patrón de diseño creacional que nos permite copiar objetos existentes sin que el código dependa de sus clases.'
  utter_patron_singleton:
  - text: 'Singleton es un patrón de diseño creacional que nos permite asegurarnos de que una clase tenga una única instancia, a la vez que proporciona un punto de acceso global a dicha instancia.'
  utter_patron_adapter:
  - text: 'Adapter es un patrón de diseño estructural que permite la colaboración entre objetos con interfaces incompatibles.'
  utter_patron_bridge:
  - text: 'Bridge es un patrón de diseño estructural que te permite dividir una clase grande, o un grupo de clases estrechamente relacionadas, en dos jerarquías separadas (abstracción e implementación) que pueden desarrollarse independientemente la una de la otra.'
  utter_patron_composite:
  - text: 'Composite es un patrón de diseño estructural que te permite componer objetos en estructuras de árbol y trabajar con esas estructuras como si fueran objetos individuales.'
  utter_patron_decorator:
  - text: 'Decorator es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales que contienen estas funcionalidades.'
  utter_patron_facade:
  - text: 'Facade es un patrón de diseño estructural que proporciona una interfaz simplificada a una biblioteca, un framework o cualquier otro grupo complejo de clases.'
  utter_patron_flyweight:
  - text: 'Flyweight es un patrón de diseño estructural que te permite mantener más objetos dentro de la cantidad disponible de RAM compartiendo las partes comunes del estado entre varios objetos en lugar de mantener toda la información en cada objeto.'
  utter_patron_proxy:
  - text: 'Proxy es un patrón de diseño estructural que te permite proporcionar un sustituto o marcador de posición para otro objeto. Un proxy controla el acceso al objeto original, permitiéndote hacer algo antes o después de que la solicitud llegue al objeto original.'
  utter_patron_chain-of-responsibility:
  - text: 'Chain of Responsibility es un patrón de diseño de comportamiento que te permite pasar solicitudes a lo largo de una cadena de manejadores. Al recibir una solicitud, cada manejador decide si la procesa o si la pasa al siguiente manejador de la cadena.'
  utter_patron_command:
  - text: 'Command es un patrón de diseño de comportamiento que convierte una solicitud en un objeto independiente que contiene toda la información sobre la solicitud. Esta transformación te permite parametrizar los métodos con diferentes solicitudes, retrasar o poner en cola la ejecución de una solicitud y soportar operaciones que no se pueden realizar.'
  utter_patron_memento:
  - text: 'Memento es un patrón de diseño de comportamiento que te permite guardar y restaurar el estado previo de un objeto sin revelar los detalles de su implementación.'
  utter_patron_iterator:
  - text: 'Iterator es un patrón de diseño de comportamiento que te permite recorrer elementos de una colección sin exponer su representación subyacente (lista, pila, árbol, etc.).'
  utter_patron_mediator:
  - text: 'Mediator es un patrón de diseño de comportamiento que te permite reducir las dependencias caóticas entre objetos. El patrón restringe las comunicaciones directas entre los objetos, forzándolos a colaborar únicamente a través de un objeto mediador.'
  utter_patron_observer:
  - text: 'Observer es un patrón de diseño de comportamiento que te permite definir un mecanismo de suscripción para notificar a varios objetos sobre cualquier evento que le suceda al objeto que están observando.'
  utter_patron_state:
  - text: 'State es un patrón de diseño de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Parece como si el objeto cambiara su clase.'
  utter_patron_strategy:
  - text: 'Strategy es un patrón de diseño de comportamiento que te permite definir una familia de algoritmos, colocar cada uno de ellos en una clase separada y hacer sus objetos intercambiables.'
  utter_patron_template-method:
  - text: 'Template Method es un patrón de diseño de comportamiento que define el esqueleto de un algoritmo en la superclase pero permite que las subclases sobrescriban pasos del algoritmo sin cambiar su estructura.'
  utter_patron_visitor:
  - text: 'Visitor es un patrón de diseño de comportamiento que te permite separar algoritmos de los objetos sobre los que operan.'


# Clases marcelo

# Concimiento wizard

#actions:
#  - action_explain_concept

forms: {}
e2e_actions: []
