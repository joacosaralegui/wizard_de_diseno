version: '2.0'
config:
  store_entities_as_slots: true
session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
intents:
- pregunta_concepto:
    use_entities: true
- pregunta_atributos:
    use_entities: true
- pregunta_patrones:
    use_entities: true
- pregunta_patrones_poo:
    use_entities: true

entities:
- atr-calidad
- concepto
- patron_arquitectonico
- patron_poo
- patron
slots:
  concepto:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  patron:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  atr-calidad:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
responses:
  utter_pregunta_concepto/patron:
  - text: Los patrones arquitectónicos dan una descripción de los elementos y el tipo de relación que tienen junto con un conjunto de restricciones sobre cómo pueden ser usados.\nUn patrón arquitectónico expresa un esquema de organización estructural esencial para un sistema de software, que consta de subsistemas, sus responsabilidades e interrelaciones.\nEn comparación con los patrones de diseño, los patrones arquitectónicos tienen un nivel de abstracción mayor.
  utter_pregunta_concepto/patron_clarificacion:
  - text: Mirá, pensalos cómo las estructuras más utilizadas para resolver problemas muy comunes a la hora de diseñar la arquitectura de tu solución.
  utter_pregunta_concepto/patrones_listado:
  - text: Los patrones más comunes son:\nCapas (Layered), Cliente-Servidor (Client-server), Maestro-Esclavo (Master-slave), Pipe-filter, Broker, Peer-to-Peer (P2P), Event-bus, MVC, Blackboard, Interpreter
  utter_pregunta_concepto/scrum:
  - text: 'La metodología Scrum es un framework que se utiliza dentro de equipos que manejan proyectos complejos. Es decir, se trata de una metodología de trabajo ágil que tiene como finalidad la entrega de valor en períodos cortos de tiempo y para ello se basa en tres pilares: la transparencia, inspección y adaptación.'
  utter_pregunta_concepto/scrum_clarificacion:
  - text: Pensalo como un conjunto de reglas y prácticas para poder organizar el trabajo de mucha gente. Cada persona tiene un rol, con distintas personalidades y hay eventos importantes que agrupan distintos roles.
  utter_pregunta_concepto/agil:
  - text: Las metodologías ágiles son un conjunto de métodos que permiten adaptar el modo de trabajo a las condiciones del proyecto, aportando flexibilidad, eficiencia y, por lo tanto, logrando un mejor producto a menor coste.
  utter_pregunta_concepto/agil_clarificacion:
  - text: Pensalos cómo la manera de combinar la velocidad y creatividad con las estructuras tradicionales de las empresas grandes.
  utter_pregunta_concepto/fdd:
  - text: Feature-driven development (FDD) es un proceso para desarrollo de software de forma iterativa e incremental\nEl proceso comienza por los requerimientos y el modelado, siguiendo por el diseño y construcción en base a incrementos
  utter_pregunta_concepto/atr-calidad:
  - text: Los atributos de calidad (también cualidades del software) son características no funcionales que se consideran deseables en un sistema de software.
  - text: Un atributo de calidad es una propiedad medible de un sistema, que indica qué tan bien el sistema satisface las necesidades de las partes interesadas.
  utter_pregunta_concepto/hook:
  - text: Hooking es un concepto que permite modificar el comportamiento de un programa. Es la posibilidad que proporciona el código de cambiar comportamiento original sin modificar código de la clase correspondiente. Esto se realiza sobreescribiendo los métodos hook.
  utter_pregunta_concepto/req_func:
  - text: Los requerimientos funcionales de un sistema son aquellos que describen cualquier actividad/servicio que éste deba realizar.
  utter_pregunta_concepto/req_func_ejemplo:
  - text: Un ejemplo de requerimiento funcional, sería:\nEl sistema permitirá a los usuarios autorizados ingresar planes y cronogramas de proyecto
  - text: Por ejemplo,\nEl sistema permitirá el envío automatizado de cartas de entrega de órdenes directamente al almacén.
  utter_pregunta_concepto/req_no_func:
  - text: Los requerimientos no funcionales representan características generales y restricciones de la aplicación o sistema que se esté desarrollando.
  - text: 'Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema: rendimiento, seguridad, disponibilidad.'
  utter_pregunta_concepto/req_no_func_ejemplo:
  - text: Por ejemplo,\nTodas las comunicaciones externas entre los servidores de datos, la aplicación y el cliente del sistema deben estar cifradas utilizando el algoritmo RSA.\nEs un ejemplo de RNF que puede encasillarse en el atributo de calidad de Seguridad.
  utter_pregunta_concepto/diferencia_req_func_no_func:
  - text: Un requisito funcional describe lo que debe hacer un sistema, mientras que los requisitos no funcionales imponen restricciones sobre cómo lo hará el sistema.
  utter_pregunta_patrones/capas:
  - text: 'Este patrón se puede utilizar para estructurar programas que se pueden descomponer en grupos de subtareas, cada una de las cuales se encuentra en un nivel particular de abstracción. Cada capa proporciona servicios a la siguiente capa superior.\n Las 4 capas más comúnmente encontradas de un sistema de información general son las siguientes: Capa de presentación, Capa de aplicación, Capa de lógica de negocios, Capa de acceso a datos.'
  utter_pregunta_patrones/cliente-servidor:
  - text: Este patrón consiste en dos partes; un servidor y múltiples clientes. El componente del servidor proporcionará servicios a múltiples componentes del cliente. Los clientes solicitan servicios del servidor y el servidor proporciona servicios relevantes a esos clientes. Además, el servidor sigue escuchando las solicitudes de los clientes
  utter_pregunta_patrones/maestro-esclavo:
  - text: Este patrón consiste en dos partes; maestro y esclavos. El componente maestro distribuye el trabajo entre componentes esclavos idénticos y calcula el resultado final de los resultados que devuelven los esclavos.
  utter_pregunta_patrones/pipe-filter:
  - text: Este patrón se puede usar para estructurar sistemas que producen y procesan una secuencia de datos. Cada paso de procesamiento se incluye dentro de un componente de filtro. Los datos que se procesarán se pasan a través de las tuberías. Estas tuberías se pueden utilizar para el almacenamiento en búfer o con fines de sincronización.
  utter_pregunta_patrones/broker:
  - text: Este patrón se usa para estructurar sistemas distribuidos con componentes desacoplados. Estos componentes pueden interactuar entre sí mediante invocaciones de servicios remotos. Un componente de intermediario es responsable de la coordinación de la comunicación entre los componentes.
  utter_pregunta_patrones/peer-to-peer:
  - text: En este patrón, los componentes individuales se conocen como pares. Los pares pueden funcionar tanto como un cliente, solicitando servicios de otros pares, y como un servidor, proporcionando servicios a otros pares. Un par puede actuar como un cliente o como un servidor o como ambos, y puede cambiar su rol dinámicamente con el tiempo.
  utter_pregunta_patrones/event-bus:
  - text: Este patrón trata principalmente con eventos y tiene 4 componentes principales; fuente de evento, escucha de evento, canal y bus de evento. Las fuentes publican mensajes en canales particulares en un bus de eventos. Los oyentes se suscriben a canales particulares. Los oyentes son notificados de los mensajes que se publican en un canal al que se han suscrito anteriormente.
  utter_pregunta_patrones/mvc:
  - text: 'Este patrón, también conocido como patrón MVC, divide una aplicación interactiva en 3 partes, como:\n Modelo — contiene la funcionalidad y los datos básicos,\n Vista: muestra la información al usuario (se puede definir más de una vista),\n Controlador: maneja la entrada del usuario.\n Esto se hace para separar las representaciones internas de información de las formas en que se presenta y acepta la información del usuario. Desacopla los componentes y permite la reutilización eficiente del código.'
  utter_pregunta_patrones/blackboard:
  - text: 'Este patrón es útil para problemas para los que no se conocen estrategias de solución deterministas. El patrón de pizarra consta de 3 componentes principales:\n Pizarra: una memoria global estructurada que contiene objetos del espacio de solución,\n Fuente de conocimiento: módulos especializados con su propia representación,\n Componente de control : selecciona, configura y ejecuta módulos.\n Todos los componentes tienen acceso a la pizarra. Los componentes pueden producir nuevos objetos de datos que se agregan a la pizarra. Los componentes buscan tipos particulares de datos en la pizarra, y pueden encontrarlos por coincidencia de patrones con la fuente de conocimiento existente.'
  utter_pregunta_patrones/interpreter:
  - text: Este patrón se usa para diseñar un componente que interpreta programas escritos en un lenguaje dedicado. Especifica principalmente cómo evaluar las líneas de programas, conocidas como oraciones o expresiones escritas en un idioma particular. La idea básica es tener una clase para cada símbolo del idioma.
  utter_pregunta_patrones_poo/abstract-factory:
  - text: Abstract Factory es un patrón de diseño creacional que nos permite producir familias de objetos relacionados sin especificar sus clases concretas.
  utter_pregunta_patrones_poo/factory-method:
  - text: Factory Method es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de objetos que se crearán.
  utter_pregunta_patrones_poo/builder:
  - text: Builder es un patrón de diseño creacional que nos permite construir objetos complejos paso a paso. El patrón nos permite producir distintos tipos y representaciones de un objeto empleando el mismo código de construcción.
  utter_pregunta_patrones_poo/prototype:
  - text: Prototype es un patrón de diseño creacional que nos permite copiar objetos existentes sin que el código dependa de sus clases.
  utter_pregunta_patrones_poo/singleton:
  - text: Singleton es un patrón de diseño creacional que nos permite asegurarnos de que una clase tenga una única instancia, a la vez que proporciona un punto de acceso global a dicha instancia.
  utter_pregunta_patrones_poo/adapter:
  - text: Adapter es un patrón de diseño estructural que permite la colaboración entre objetos con interfaces incompatibles.
  utter_pregunta_patrones_poo/bridge:
  - text: Bridge es un patrón de diseño estructural que te permite dividir una clase grande, o un grupo de clases estrechamente relacionadas, en dos jerarquías separadas (abstracción e implementación) que pueden desarrollarse independientemente la una de la otra.
  utter_pregunta_patrones_poo/composite:
  - text: Composite es un patrón de diseño estructural que te permite componer objetos en estructuras de árbol y trabajar con esas estructuras como si fueran objetos individuales.
  utter_pregunta_patrones_poo/decorator:
  - text: Decorator es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales que contienen estas funcionalidades.
  utter_pregunta_patrones_poo/facade:
  - text: Facade es un patrón de diseño estructural que proporciona una interfaz simplificada a una biblioteca, un framework o cualquier otro grupo complejo de clases.
  utter_pregunta_patrones_poo/flyweight:
  - text: Flyweight es un patrón de diseño estructural que te permite mantener más objetos dentro de la cantidad disponible de RAM compartiendo las partes comunes del estado entre varios objetos en lugar de mantener toda la información en cada objeto.
  utter_pregunta_patrones_poo/proxy:
  - text: Proxy es un patrón de diseño estructural que te permite proporcionar un sustituto o marcador de posición para otro objeto. Un proxy controla el acceso al objeto original, permitiéndote hacer algo antes o después de que la solicitud llegue al objeto original.
  utter_pregunta_patrones_poo/chain-of-responsibility:
  - text: Chain of Responsibility es un patrón de diseño de comportamiento que te permite pasar solicitudes a lo largo de una cadena de manejadores. Al recibir una solicitud, cada manejador decide si la procesa o si la pasa al siguiente manejador de la cadena.
  utter_pregunta_patrones_poo/command:
  - text: Command es un patrón de diseño de comportamiento que convierte una solicitud en un objeto independiente que contiene toda la información sobre la solicitud. Esta transformación te permite parametrizar los métodos con diferentes solicitudes, retrasar o poner en cola la ejecución de una solicitud y soportar operaciones que no se pueden realizar.
  utter_pregunta_patrones_poo/memento:
  - text: Memento es un patrón de diseño de comportamiento que te permite guardar y restaurar el estado previo de un objeto sin revelar los detalles de su implementación.
  utter_pregunta_patrones_poo/iterator:
  - text: Iterator es un patrón de diseño de comportamiento que te permite recorrer elementos de una colección sin exponer su representación subyacente (lista, pila, árbol, etc.).
  utter_pregunta_patrones_poo/mediator:
  - text: Mediator es un patrón de diseño de comportamiento que te permite reducir las dependencias caóticas entre objetos. El patrón restringe las comunicaciones directas entre los objetos, forzándolos a colaborar únicamente a través de un objeto mediador.
  utter_pregunta_patrones_poo/observer:
  - text: Observer es un patrón de diseño de comportamiento que te permite definir un mecanismo de suscripción para notificar a varios objetos sobre cualquier evento que le suceda al objeto que están observando.
  utter_pregunta_patrones_poo/state:
  - text: State es un patrón de diseño de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Parece como si el objeto cambiara su clase.
  utter_pregunta_patrones_poo/strategy:
  - text: Strategy es un patrón de diseño de comportamiento que te permite definir una familia de algoritmos, colocar cada uno de ellos en una clase separada y hacer sus objetos intercambiables.
  utter_pregunta_patrones_poo/template-method:
  - text: Template Method es un patrón de diseño de comportamiento que define el esqueleto de un algoritmo en la superclase pero permite que las subclases sobrescriban pasos del algoritmo sin cambiar su estructura.
  utter_pregunta_patrones_poo/visitor:
  - text: Visitor es un patrón de diseño de comportamiento que te permite separar algoritmos de los objetos sobre los que operan.
  utter_pregunta_atributos/listado:
  - text: 'Los atributos de calidad son: Tolerancia a Fallos, Disponiilidad, Mantenibilidad, Performance, Escalabilidad, Seguridad, Usabilidad, Portabilidad e Interoperabilidad'
  utter_pregunta_atributos/tolerancia-a-fallos:
  - text: Es la capacidad del sistema o componente para operar según lo previsto en presencia de fallos hardware o software.
  utter_pregunta_atributos/tolerancia-a-fallos_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Tolerancia a fallos puede ser:\nEl producto tendrá tolerancia a fallas mediante el uso de técnicas de recuperación, transacciones compensatorias y enrutamiento en caso de fallas.
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Tolerancia a fallos puede ser:\nDebe ser posible que se trate de forma independiente una falla de software del sistema
  utter_pregunta_atributos/disponibilidad:
  - text: Capacidad del sistema o componente de estar operativo y accesible para su uso cuando se requiere.
  utter_pregunta_atributos/disponibilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Disponibilidad puede ser:\nEs relevante que el sistema este disponible las 24 horas del día durante todo el año
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Disponibilidad puede ser:\nEl sistema debe estar inactivo un tiempo relativamente corto por año.
  utter_pregunta_atributos/mantenibilidad:
  - text: Esta característica representa la capacidad del producto software para ser modificado efectiva y eficientemente, debido a necesidades evolutivas, correctivas o perfectivas.
  utter_pregunta_atributos/mantenibilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Mantenibilidad puede ser:\nLos componentes del sistema deben poder intercambiarse sin afectar el funcionamiento del programa
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Mantenibilidad puede ser:\nEl sistema debe ser fácil de actualizar
  utter_pregunta_atributos/performance:
  - text: Esta característica representa el desempeño relativo a la cantidad de recursos utilizados bajo determinadas condiciones
  utter_pregunta_atributos/performance_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Performance puede ser:\nEs importante que el sistema traiga resultados de búsqueda en un tiempo aceptable
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Performance puede ser:\nEl tiempo de espera para que un usuario navegue de una pantalla será inmediato
  utter_pregunta_atributos/escalabilidad:
  - text: 'Es la capacidad de un sistema para funcionar bien cuando se presentan cambios en la demanda o en la carga del mismo. '
  utter_pregunta_atributos/escalabilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Escalabilidad puede ser:\nEl producto debe ser capaz de soportar y administrar 1000 usuarios simultáneos y remotos
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Escalabilidad puede ser:\nEl sistema de manejo de cuentas debera soportar un número ilimitado de clientes, cuentas y transacciones
  utter_pregunta_atributos/seguridad:
  - text: 'Capacidad de protección de la información y los datos de manera que personas o sistemas no autorizados no puedan leerlos o modificarlos. '
  utter_pregunta_atributos/seguridad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Seguridad puede ser:\nEs importante que el sistema traiga autorización de usuarios y almacenamiento seguro de contraseñas
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Seguridad puede ser:\nNo se introducirán datos inválidos en el sistema
  utter_pregunta_atributos/usabilidad:
  - text: 'Es la capacidad del producto software para ser entendido, aprendido, usado y resultar atractivo para el usuario, cuando se usa bajo determinadas condiciones. '
  utter_pregunta_atributos/usabilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Usabilidad puede ser:\nEs importante que el sistema sea intuitivo y de fácil comprensión
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Usabilidad puede ser:\nLa navegación debe diseñarse para ayudar a los usuarios a comprender dónde se encuentran, dónde han estado y adónde pueden ir a continuación
  utter_pregunta_atributos/portabilidad:
  - text: Es la capacidad del producto o componente de ser transferido de forma efectiva y eficiente de un entorno hardware, software, operacional o de utilización a otro
  utter_pregunta_atributos/portabilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Portabilidad puede ser:\nEl sistema debe funcionar en más de una plataforma móvil (Android, iOS)
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Portabilidad puede ser:\nEl producto debe correr en más de un sistema operativo (Windows, Linux, macOS)
  utter_pregunta_atributos/interoperabilidad:
  - text: Es la capacidad de dos o más sistemas o componentes para intercambiar información y/o llevar a cabo sus funciones requeridas cuando comparten el mismo entorno hardware o software
  utter_pregunta_atributos/interoperabilidad_ejemplo:
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Interoperabilidad puede ser:\nEl producto debe tener la capacidad de interpretar correctamente los datos que se intercambian
  - text: Por ejemplo, un requerimiento no funcional que se encasilla en Interoperabilidad puede ser:\nEl sistema debe poder comunicarse fácilmente con otros servicios
  utter_pregunta_concepto/fdd_clarificacion:
  - text: 'Te lo explico con otras palabras... fdd es un metodologia agil para el desarrollo de sistemas que incluye el monitoreo constante de porceso'
  utter_pregunta_concepto/atr-calidad_clarificacion:
  - text: 'Y mira, los atributos de calidad son aspectos importates impotantes de la arquitectura de software, indica que tan bien el sistema satisface las necesidades de las partes interesadas'
  utter_pregunta_concepto/hook_clarificacion:
  - text: 'Hooking se utiliza para muchos propósitos, incluyendo la depuración de programas y la ampliación de la funcionalidad'
  utter_pregunta_concepto/req_func_clarificacion:
  - text: 'Es importante saber que un requisito funcional define una función del sistema de software o sus componentes.'
  utter_pregunta_concepto/req_no_func_clarificacion:
  - text: 'Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema: rendimiento, seguridad, disponibilidad.'
  utter_pregunta_concepto/diferencia_req_func_no_func_clarificacion:
  - text: 'En resumen, el requisito funcional es describir el comportamiento del sistema en relación con la funcionalidad del sistema. El requisito no funcional elabora una característica de rendimiento del sistema.'
  utter_pregunta_atributos/tolerancia-a-fallos_clarificacion:
  - text: 'Un diseño tolerante a fallos es un sistema que está capacitado para continuar su funcionamiento cuando algún componente del sistema falla'
  utter_pregunta_atributos/disponibilidad_clarificacion:
  - text: 'En pocas palabras, la disponibilidad es la proporción de tiempo que un sistema está en condiciones de funcionamiento.'
  utter_pregunta_atributos/mantenibilidad_clarificacion:
  - text: 'La mantenibilidad se refiere a la facilidad con que se pueden ejecutar las tareas de gestión de mantenimiento del sistema'
  utter_pregunta_atributos/performance_clarificacion:
  - text: 'En pocas palabras, desempeño con respecto al rendimiento de una computadora, un dispositivo, un sistema operativo, un programa o una conexión a una red'
  utter_pregunta_atributos/escalabilidad_clarificacion:
  - text: 'Se entiende por escalabilidad a la capacidad de adaptación y respuesta de un sistema'
  utter_pregunta_atributos/seguridad_clarificacion:
  - text: 'Es la medida sobre la habilidad del sistema para resistir usos no autorizados mientras sigue proveyendo sus servicios a los usuarios legítimos.'
  utter_pregunta_atributos/usabilidad_clarificacion:
  - text: 'Simplificando, es el grado de facilidad del sistema para ser operado'
  utter_pregunta_atributos/portabilidad_clarificacion:
  - text: 'Resumiendo, es el grado en el que los datos tienen atributos que les permiten ser instalados, reemplazados o eliminados de un sistema a otro'
  utter_pregunta_atributos/interoperabilidad_clarificacion:
  - text: 'En pocas palabras, el atrbutos de calidad interoperabilidad es responsable del funcionamiento y la transmisión de datos y su intercambio con otros sistemas externos'
##caso de usos/ejemplos
  utter_pregunta_concepto/scrum_ejemplo:
    - text: 'Un ejemplo del uso de Scrum es Spotify, ya que dieron mucha importancia al rol del Scrum Master y al del Product Owner. Gracias a esta metodología, descubrieron y entendieron las necesidades reales de los clientes y realizaron un buen trabajo de equipo coordinándose en la empresa.'
  utter_pregunta_concepto/agil_ejemplo:
    - text: 'Existen diferentes opciones como Scrum, Kanban, entre otras; todas ellas se guían a través de un patrón establecido por el Manifiesto Ágil'
  utter_pregunta_concepto/fdd_ejemplo:
    - text: ''
  utter_pregunta_concepto/hook_ejemplo:
    - text: 'Hay varios ejemplos, como incluir la interceptación de mensajes de eventos de teclado o de ratón antes de que lleguen a una aplicación o interceptar llamadas de sistema operativo para supervisar el comportamiento o modificar la función de una aplicación u otro componente.'
  utter_pregunta_concepto/diferencia_req_func_no_func_ejemplo:
    - text: 'Los requisitos no funcionales a veces se definen en términos de métricas es decir, algo que se puede medir sobre el sistema para hacerlos más tangibles. Los requisitos no funcionales también pueden describir aspectos del sistema que no se relacionan con su ejecución, sino con su evolución a lo largo del tiempo, por ejemplo, mantenibilidad, extensibilidad, documentación, etc.'
  
actions:
- action_clarificacion
- action_dispatch_patrones_arq
- action_dispatch_patrones_poo
- action_default_fallback
- action_ejemplo
- utter_chitchat
- utter_de_nada
- utter_pregunta_atributos
- utter_pregunta_concepto
- utter_pregunta_patrones
- utter_saludo
forms: {}
e2e_actions: []
